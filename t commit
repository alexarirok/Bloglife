[1mdiff --git a/.gitignore.txt b/.gitignore.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..d34822c[m
[1m--- /dev/null[m
[1m+++ b/.gitignore.txt[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m*.pyc[m
[32m+[m[32m/backend/db.sqlite3[m
[32m+[m[32m.DS_Store[m
[32m+[m[32m.env[m
[32m+[m[32m*/settings/local.py[m
[32m+[m[32m/staticfiles/*[m
[32m+[m[32m/mediafiles/*[m
[32m+[m[32m__pycache__/[m
[32m+[m[32m/.vscode/[m
[32m+[m
[32m+[m[32m# coverage result[m
[32m+[m[32m.coverage[m
[32m+[m[32m/coverage/[m
[32m+[m
[32m+[m[32m# pycharm[m
[32m+[m[32m.idea/[m
[32m+[m
[32m+[m[32m# data[m
[32m+[m[32m*.dump[m
[32m+[m
[32m+[m[32m# npm[m
[32m+[m[32mnode_modules/[m
[32m+[m[32mnpm-debug.log[m
[32m+[m
[32m+[m[32m# Webpack[m
[32m+[m[32m/frontend/bundles/*[m
[32m+[m[32m/frontend/webpack_bundles/*[m
[32m+[m[32m/webpack-stats.json[m
[32m+[m[32m/jquery-webpack-stats.json[m
[32m+[m
[32m+[m[32m# Sass[m
[32m+[m[32m.sass-cache[m
[32m+[m[32m*.map[m
[32m+[m
[32m+[m[32m# General[m
[32m+[m[32m/{{project_name}}-venv/[m
[32m+[m[32m/venv/[m
[32m+[m[32m/env/[m
[32m+[m[32m/output/[m
[32m+[m[32m/cache/[m
[32m+[m[32mboilerplate.zip[m
[32m+[m
[32m+[m[32m# Spritesmith[m
[32m+[m[32mspritesmith-generated/[m
[32m+[m[32mspritesmith.scss[m
[32m+[m
[32m+[m[32m# templated email[m
[32m+[m[32mtmp_email/[m
\ No newline at end of file[m
[1mdiff --git a/Backend/accounts/__init__.py b/Backend/accounts/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/Backend/accounts/__pycache__/__init__.cpython-37.pyc b/Backend/accounts/__pycache__/__init__.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..fcbcc07[m
Binary files /dev/null and b/Backend/accounts/__pycache__/__init__.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/__pycache__/admin.cpython-37.pyc b/Backend/accounts/__pycache__/admin.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..3bd3b32[m
Binary files /dev/null and b/Backend/accounts/__pycache__/admin.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/__pycache__/models.cpython-37.pyc b/Backend/accounts/__pycache__/models.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..070c71a[m
Binary files /dev/null and b/Backend/accounts/__pycache__/models.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/__pycache__/serializers.cpython-37.pyc b/Backend/accounts/__pycache__/serializers.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..f21f3cd[m
Binary files /dev/null and b/Backend/accounts/__pycache__/serializers.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/admin.py b/Backend/accounts/admin.py[m
[1mnew file mode 100644[m
[1mindex 0000000..8c38f3f[m
[1m--- /dev/null[m
[1m+++ b/Backend/accounts/admin.py[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mfrom django.contrib import admin[m
[32m+[m
[32m+[m[32m# Register your models here.[m
[1mdiff --git a/Backend/accounts/apps.py b/Backend/accounts/apps.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9b3fc5a[m
[1m--- /dev/null[m
[1m+++ b/Backend/accounts/apps.py[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32mfrom django.apps import AppConfig[m
[32m+[m
[32m+[m
[32m+[m[32mclass AccountsConfig(AppConfig):[m
[32m+[m[32m    name = 'accounts'[m
[1mdiff --git a/Backend/accounts/migrations/0001_initial.py b/Backend/accounts/migrations/0001_initial.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1aab600[m
[1m--- /dev/null[m
[1m+++ b/Backend/accounts/migrations/0001_initial.py[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32m# Generated by Django 3.1.5 on 2021-01-26 15:45[m
[32m+[m
[32m+[m[32mfrom django.db import migrations, models[m
[32m+[m
[32m+[m
[32m+[m[32mclass Migration(migrations.Migration):[m
[32m+[m
[32m+[m[32m    initial = True[m
[32m+[m
[32m+[m[32m    dependencies = [[m
[32m+[m[32m        ('auth', '0012_alter_user_first_name_max_length'),[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    operations = [[m
[32m+[m[32m        migrations.CreateModel([m
[32m+[m[32m            name='UserAccount',[m
[32m+[m[32m            fields=[[m
[32m+[m[32m                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),[m
[32m+[m[32m                ('password', models.CharField(max_length=128, verbose_name='password')),[m
[32m+[m[32m                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),[m
[32m+[m[32m                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),[m
[32m+[m[32m                ('email', models.EmailField(max_length=255, unique=True)),[m
[32m+[m[32m                ('first_name', models.CharField(max_length=255)),[m
[32m+[m[32m                ('last_name', models.CharField(max_length=255)),[m
[32m+[m[32m                ('is_active', models.BooleanField(default=True)),[m
[32m+[m[32m                ('is_staff', models.BooleanField(default=False)),[m
[32m+[m[32m                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),[m
[32m+[m[32m                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),[m
[32m+[m[32m            ],[m
[32m+[m[32m            options={[m
[32m+[m[32m                'abstract': False,[m
[32m+[m[32m            },[m
[32m+[m[32m        ),[m
[32m+[m[32m    ][m
[1mdiff --git a/Backend/accounts/migrations/__init__.py b/Backend/accounts/migrations/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/Backend/accounts/migrations/__pycache__/0001_initial.cpython-37.pyc b/Backend/accounts/migrations/__pycache__/0001_initial.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..359f834[m
Binary files /dev/null and b/Backend/accounts/migrations/__pycache__/0001_initial.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/migrations/__pycache__/__init__.cpython-37.pyc b/Backend/accounts/migrations/__pycache__/__init__.cpython-37.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..76ec077[m
Binary files /dev/null and b/Backend/accounts/migrations/__pycache__/__init__.cpython-37.pyc differ
[1mdiff --git a/Backend/accounts/models.py b/Backend/accounts/models.py[m
[1mnew file mode 100644[m
[1mindex 0000000..452015c[m
[1m--- /dev/null[m
[1m+++ b/Backend/accounts/models.py[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32mfrom django.db import models[m
[32m+[m[32mfrom django.contrib.auth.models import AbstractBaseUser,PermissionsMixin, BaseUserManager[m
[32m+[m
[32m+[m[32mclass UserAccountManager(BaseUserManager):[m
[32m+[m[32m    def create_user(self, email, password=None, **extra_fields):[m
[32m+[m[32m        if not email:[m
[32m+[m[32m            raise ValueError('User must have active emeil address')[m
[32m+[m
[32m+[m[32m        email = self.normalize_email(email)[m
[32m+[m[32m        user = self.model(email=email, **extra_fields)[m
[32m+[m
[32m+[m[32m        user.set_password(password)[m
[32m+[m[32m        user.save()[m
[32m+[m
[32m+[m[32m        return user[m
[32m+[m
[32m+[m[32mclass UserAccount(AbstractBaseUser, PermissionsMixin):[m
[32m+[m[32m    email = models.EmailField(max_length=255, unique=True)[m
[32m+[m[32m    first_name = models.CharField(max_length=255)[m
[32m+[m[32m    last_name = models.CharField(max_length=255)[m
[32m+[m[32m    is_active = models.BooleanField(default=True)[m
[32m+[m[32m    is_staff = models.BooleanField(default=False)[m
[32m+[m
[32m+[m[32m    objects = UserAccou